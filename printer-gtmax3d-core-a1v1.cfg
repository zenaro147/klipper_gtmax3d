# Elaborado e testado por @zenaro147

# Aquivo de configuração para a GTMax Core A1 v1.
# Esta configuração é baseada na impressora usando toda eletronica original.
# Essa configuração foi baseada no Klipper com a interface Mainsail
# Antes de usar, recomendo recalibrar o PID da mesa e da extrusora, usando os comandos "PID_CALIBRATE HEATER=heater_bed TARGET=110" e "PID_CALIBRATE HEATER=extruder TARGET=240"
##########################################################
# Upgrades realizados
# - Adicionada Webcam internamente para visualização
# - Adicionado sensor de filamento Smart Filament Sensor, da BIGTREETECH (Usando os pinos de 5v, GND e D57 da AUX1 da RAMPS1.4)
# - Adicionado acelerometro no carro de impressão e fixado em cima do Probe (ligado no Raspberry Pi seguindo a documentação https://www.klipper3d.org/Measuring_Resonances.html)
# - Troca dos drivers dos motores por um TMC2209 (Vref de 850mV) ligados no UART (todos na porta AUX2) - Ainda não implementado totalmente.
##########################################################
# Caso necessário ajuste também o offset do probe em relação ao bico, seguindo a documentacao https://www.klipper3d.org/Probe_Calibrate.html. Lembre de mudar o "home_xy_position", "mesh_min" e "mesh_max", Caso isso gere valores diferentes do firmware

[include mainsail.cfg]
[include timelapse.cfg] ; Habilita modulo de timelapse, caso queira colocar uma webcam dentro da impressora

[stepper_x]
step_pin: P2.2
dir_pin: P2.6
enable_pin: !P2.1
microsteps: 16
rotation_distance: 40
endstop_pin: !P1.29
position_endstop: -5
position_min: -5
position_max: 300
homing_speed: 50

[stepper_y]
step_pin: P0.19
dir_pin: P0.20
enable_pin: !P2.8
microsteps: 16
rotation_distance: 40
endstop_pin: !P1.28
position_endstop: 0
position_max: 200
homing_speed: 50

[stepper_z]
step_pin: P0.22
dir_pin: !P2.11
enable_pin: !P0.21
microsteps: 16
rotation_distance: 8
position_max: 250
endstop_pin: probe:z_virtual_endstop
position_min: -5
                    
[extruder]
step_pin: P2.13
dir_pin: !P0.11
enable_pin: !P2.12
microsteps: 16
rotation_distance: 21.95499 ;Steps per mm = 145,75272 // Recalculado Original: 8.626 // Original: 8.547, calculado baseado no M92 do EEPROM: rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm> /// 200 * 16 / 374.40 - https://www.klipper3d.org/Rotation_Distance.html
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: P2.4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: P0.24
#control: pid    ;Valores da EEPROM original
#pid_Kp: 32.81   ;Valores da EEPROM original
#pid_Ki: 3.84    ;Valores da EEPROM original
#pid_Kd: 70.15   ;Valores da EEPROM original
min_temp: 0
max_temp: 250
max_extrude_only_velocity: 100
max_extrude_only_accel: 3000
min_extrude_temp: 150
max_extrude_only_distance: 100
#pressure_advance: 0.7572 ;0.839 ;Filamento Nude Gtmax 3d ABS - https://www.klipper3d.org/Pressure_Advance.html
pressure_advance: 0.5 ;0.839 ;Filamento Nude Gtmax 3d ABS - https://www.klipper3d.org/Pressure_Advance.html
#max_extrude_cross_section: 100
#max_extrude_only_distance: 1000

[probe]
pin: ^P1.27
#z_offset: 4.350   ;Valores originais
#x_offset: -18     ;Valores originais
#y_offset: -43     ;Valores originais
x_offset: -12      ;Novos valores após medicao seguindo a documentacao https://www.klipper3d.org/Probe_Calibrate.html
y_offset: -39      ;Novos valores após medicao seguindo a documentacao https://www.klipper3d.org/Probe_Calibrate.html
samples: 2

[safe_z_home]
#home_xy_position: 168, 143  ;Valores Originais
home_xy_position: 162, 139  ;Visto que a mesa tem 300x200, ao aplicar o offset, o probe mede em 150x100
speed: 50
z_hop: 15

[fan]
pin: P2.3

[heater_bed]
heater_pin: P2.5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: P0.25
#control: watermark
min_temp: 0
max_temp: 130

[bed_mesh]
#mesh_min: 27, 63      ;Valores originais
#mesh_max: 295, 193    ;Valores originais
mesh_min: 15, 24       ;Adaptado para offset do probe
mesh_max: 283, 154     ;Adaptado para offset do probe
probe_count: 5, 4      ;Original é 3x3, mas alterei para 5x4 (medição de 20 pontos)
horizontal_move_z: 10  ;Dependendo do desnivel, o valor padrao pode ser pouco. 10 é um valor seguro
algorithm: bicubic

[display_status]

[display]
lcd_type: hd44780
rs_pin: EXP1_4
e_pin: EXP1_3
d4_pin: EXP1_5
d5_pin: EXP1_6
d6_pin: EXP1_7
d7_pin: EXP1_8
encoder_pins: ^EXP2_3, ^EXP2_5
click_pin: ^!EXP1_2
kill_pin: ^!EXP2_7

[output_pin BEEPER_pin]
pin: EXP1_1
pwm: True
value: 0.
shutdown_value: 0
cycle_time: 0.001

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=P1.30, EXP1_3=P1.18, EXP1_5=P1.20, EXP1_7=P1.22, EXP1_9=<GND>,
    EXP1_2=P0.28, EXP1_4=P1.19, EXP1_6=P1.21, EXP1_8=P1.23, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=P0.17, EXP2_3=P3.26, EXP2_5=P3.25, EXP2_7=P1.31, EXP2_9=<GND>,
    EXP2_2=P0.15, EXP2_4=P0.16, EXP2_6=P0.18, EXP2_8=<RST>, EXP2_10=<NC>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "ssp0"

[mcu]
serial: /dev/serial/by-id/usb-Klipper_lpc1768_28B001042921BC95706EBE60C72000F5-if00

[printer]
kinematics: corexy
max_velocity: 100 #Padrao 200
max_accel: 1500 #Padrao 2000
max_z_velocity: 20 #Padrao 50
max_z_accel: 100 #Padrão 1000
square_corner_velocity: 1

# Habilita M118 - Mostrar mensagem no Console
[respond]

# Macro para simular o G29 original
[gcode_macro G29]
gcode:
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  G1 Z10 F12000
  G1 X8 Y35
  G1 Z1 
  G1 Z10

######################################################################
# MCU secundário (Raspberry Pi) - Opcional, porém recomendo para adição de sensores sem mexer na RAMPS
######################################################################
[mcu rpi]
serial: /tmp/klipper_host_mcu

######################################################################
# Upgrades na impressora
######################################################################
# Adicionado acelerometro ADXL345 para medição da vibração do carro. Util para diminuir o "ghosting" em velocidades altas 
# https://www.klipper3d.org/Measuring_Resonances.html
[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    150, 100, 20  # Realiza o teste no centro da mesa. Também é possível alterar esses valores para outros.

# Habilita modulo de probe manual
[manual_probe]

# Suporte para comandos gcode arc (G2/G3)
[gcode_arcs]
resolution: 0.5

# Sensor de filamento - O codigo não carrega/remove o filamento sozinho, necessário usar o botão de macro no Mainsail ou a opção no LCD (Menu > Filament > Load Filament // (Menu > Filament > Remove Filament) ou com as macros REMOVE_FILAMENT e INSERT_FILAMENT
# Fiz essa alteração por conta que o código também era executado caso a impressora esteja em standby
[pause_resume]

#Sensor usando um Microswitch
#[filament_switch_sensor e0_sensor]
#switch_pin: ^!PF3
#pause_on_runout: True
#runout_gcode:
#    REMOVE_FILAMENT

#Smart Filament Sensor
[filament_motion_sensor e0_sensor]
detection_length: 7.0
extruder: extruder
switch_pin: ^!P1.26
pause_on_runout: True
#runout_gcode:
#    REMOVE_FILAMENT

# Comando M600 para troca de filamento
[gcode_macro M600]
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    {% if printer.pause_resume.is_paused == false %}
    PAUSE
    {% endif %}
    REMOVE_FILAMENT
    RESTORE_GCODE_STATE NAME=M600_state

# Comando M0 para Pausa
[gcode_macro M0]
gcode:
    SAVE_GCODE_STATE NAME=M0_state
    PAUSE
    RESTORE_GCODE_STATE NAME=M0_state

# Suporte ao gcode M486 (cancelar objetos) - Util caso imprima vários objetos e algum deles de problema
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

# Recria macro M117 para poder implementar o "INDICATOR-Layer" (muito usado no Octoprint)
[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
      {% if rawparams.find("INDICATOR-Layer") >= 0 %}
      {% set layernum = rawparams.replace('INDICATOR-Layer', '') %}
      SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=current_layer VALUE={(layernum|int)+(1|int)}
      {% else %}
       M117.1 {rawparams}
      {% endif %}
  {% endif %}

# Recria Macros dos comandos de temperatura do Hotend e Mesa para melhor controle na hora de retomar a impressão ao trocar filamento
[gcode_macro M190]
rename_existing: M190.1
gcode:
  {% set S = params.S|default(0) %}
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=hotbed_temp VALUE={S} 
  M190.1 S{S}

[gcode_macro M140]
rename_existing: M140.1
gcode:
  {% set S = params.S|default(0) %}
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=hotbed_temp VALUE={S} 
  M140.1 S{S}

[gcode_macro M109]
rename_existing: M109.1
gcode:
  {% set S = params.S|default(0) %}
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=hotend_temp VALUE={S} 
  M109.1 S{S}

[gcode_macro M104]
rename_existing: M104.1
gcode:
  {% set S = params.S|default(0) %}
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=hotend_temp VALUE={S} 
  M104.1 S{S}

#[tmc2209 stepper_x]
#uart_pin: PK1 #Pin63 
#   The pin connected to the TMC2209 PDN_UART line. This parameter
#   must be provided.
#tx_pin: PF5 #Pin59
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
#select_pins:
#   A comma separated list of pins to set prior to accessing the
#   tmc2208 UART. This may be useful for configuring an analog mux for
#   UART communication. The default is to not configure any pins.
#interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). This interpolation does
#   introduce a small systemic positional deviation - see
#   TMC_Drivers.md for details. The default is True.
#run_current: 0.601
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
#hold_current:
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. Setting a hold_current is not
#   recommended (see TMC_Drivers.md for details). The default is to
#   not reduce the current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
#stealthchop_threshold: 0
#stealthchop_threshold: 999999
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.

#[tmc2209 stepper_y]
#uart_pin: PG1 #Pin40
#   The pin connected to the TMC2209 PDN_UART line. This parameter
#   must be provided.
#tx_pin: PK2 #Pin64
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
#select_pins:
#   A comma separated list of pins to set prior to accessing the
#   tmc2208 UART. This may be useful for configuring an analog mux for
#   UART communication. The default is to not configure any pins.
#interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). This interpolation does
#   introduce a small systemic positional deviation - see
#   TMC_Drivers.md for details. The default is True.
#run_current: 0.601
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
#hold_current:
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. Setting a hold_current is not
#   recommended (see TMC_Drivers.md for details). The default is to
#   not reduce the current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
#stealthchop_threshold: 0
#stealthchop_threshold: 999999
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.

#[tmc2209 stepper_z]
#uart_pin: PL7 #Pin42
#   The pin connected to the TMC2209 PDN_UART line. This parameter
#   must be provided.
#tx_pin: PL5 #Pin44
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
#select_pins:
#   A comma separated list of pins to set prior to accessing the
#   tmc2208 UART. This may be useful for configuring an analog mux for
#   UART communication. The default is to not configure any pins.
#interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). This interpolation does
#   introduce a small systemic positional deviation - see
#   TMC_Drivers.md for details. The default is True.
#run_current: 0.601
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
#hold_current:
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. Setting a hold_current is not
#   recommended (see TMC_Drivers.md for details). The default is to
#   not reduce the current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
#stealthchop_threshold: 0
#stealthchop_threshold: 999999
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.

#[tmc2209 extruder]
#uart_pin: PK3 #Pin65
#   The pin connected to the TMC2209 PDN_UART line. This parameter
#   must be provided.
#tx_pin: PK4 #Pin66
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
#select_pins:
#   A comma separated list of pins to set prior to accessing the
#   tmc2208 UART. This may be useful for configuring an analog mux for
#   UART communication. The default is to not configure any pins.
#interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). This interpolation does
#   introduce a small systemic positional deviation - see
#   TMC_Drivers.md for details. The default is True.
#run_current: 0.601
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
#hold_current:
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. Setting a hold_current is not
#   recommended (see TMC_Drivers.md for details). The default is to
#   not reduce the current.
#sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.110 ohms.
#stealthchop_threshold: 0
#stealthchop_threshold: 999999
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.

######################################################################
# Menus customizadas LCD
######################################################################
# Adiciona opção no LCD para carregar o filamento
[menu __main __filament __loadfil]
type: command
name: Load Filament
gcode:
    INSERT_FILAMENT

# Adiciona opção no LCD para revmover o filamento
[menu __main __filament __removefil]
type: command
name: Remove Filament
gcode:
    REMOVE_FILAMENT

# Muda opção para preparar PLA
[menu __main __temp __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S65
    M104 S235

[menu __main __temp __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S235

[menu __main __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S65

# Muda opção para preparar ABS
[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S110
    M104 S240

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S240

# Muda opção do PID
[menu __main __setup __tuning __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Tune Hotend PID
gcode: PID_CALIBRATE HEATER=extruder TARGET=240 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Tune Hotbed PID
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=110 WRITE_FILE=1

# Adiciona menu para calibrar a resonancia usando acelerometro
[menu __main __setup __calib __auto_resonance]
type: command
enable: {(not printer.idle_timeout.state == "Printing")}
name: Cal. resonance
gcode:
    CALIBRATE_RESONANCE

# Adiciona menu para calibrar a resonancia usando acelerometro
[menu __main __setup __calib __calibesteps]
type: command
enable: {(not printer.idle_timeout.state == "Printing")}
name: Cal. E steps
gcode:
    CALIBRATE_ESTEPS

[display_data _default_20x4 fan]
position: 1, 14
text:
  {% if 'fan' in printer %}
    ~fan~
    { " {:^4.0%}".format(printer.fan.speed) }
  {% endif %}

[display_data _default_20x4 layernum]
position: 1, 0
text: 
  ~layer~  
  { " %d" % (printer["gcode_macro PRINTER_TEMPS_VALUE"].current_layer)}

[display_glyph layer]
hd44780_slot: 7
hd44780_data:
  *****
  .***.
  ..*..
  ..*..
  ...*.
  ***..
  *****
  *****

######################################################################
# Macros customizadas
######################################################################
# Para usar a current_layer, é necessário passar o parametro no GCODE (Before Layer Change) seguindo a documentação desse link https://github.com/OllisGit/OctoPrint-DisplayLayerProgress/wiki/How-does-the-plugin-works#manuell-adding-layer-indicators-via-slicer
[gcode_macro PRINTER_TEMPS_VALUE]
variable_hotend_temp: 0
variable_hotbed_temp: 0
variable_current_layer: 0
gcode:
  M118 Valores Gravados

# Imprime no console os valores salvos das variaveis de temperatura
[gcode_macro PRINT_STORED_VARS_TEMPS]
gcode:
  M118 Temp Extrusor = {printer["gcode_macro PRINTER_TEMPS_VALUE"].hotend_temp}
  M118 Temp Mesa = {printer["gcode_macro PRINTER_TEMPS_VALUE"].hotbed_temp}
  M118 Camada Atual = {printer["gcode_macro PRINTER_TEMPS_VALUE"].current_layer}

# Le os valores no parametro (enviados no START_PRINT) e salva elas
[gcode_macro SET_PRINTER_TEMPS_VALUE]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(110)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(233)|float %}
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=hotend_temp VALUE={EXTRUDER_TEMP}
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=hotbed_temp VALUE={BED_TEMP}
  M118 Variaveis Salvas!

# Start Print e End Print
# Altere no seu fatiador os G-CODE de inicio e fim da impressão para START_PRINT e END_PRINT.
# - BED_TEMP = Temepratura da mesa na camada 0
# - EXTRUDER_TEMP = Temepratura do extrusor na camada 0
# Exemplo Cura: 
#               G-CODE INICIAL: START_PRINT BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0}
#               G-CODE FINAL: END_PRINT
# Exemplo Prusa Slicer: 
#               G-CODE INICIAL: START_PRINT BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP=[first_layer_temperature]
#               G-CODE FINAL: END_PRINT
[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(110)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=current_layer VALUE=0
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=hotend_temp VALUE=0
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=hotbed_temp VALUE=0
  BED_MESH_PROFILE LOAD=default
  M190 S{BED_TEMP} ; AQUECE MESA PARA A TEMPERATURA DA PRIMEIRA CAMADA
  M109 S{EXTRUDER_TEMP} ; AQUECE EXTRUSOR PARA A TEMPERATURA DA PRIMEIRA CAMADA
  M402
  G28 ; HOME GERAL
  M400
  G29 ; AUTO NIVELAMENTO
  M400
  G92 E0; RESETA EXTRUSOR
  G1 X0 Y0 Z0.7 F10000 ; VAI PARA PONTO DE PURGA
  G1 E20 F150; FAZ A PURGA
  G92 E0;  RESETA EXTRUSOR
  G1 E-4; RETIRA PRESSAO DO BICO
  G1 Z10; SOBE O BICO
  G1 X0 Y30 F10000; MOVIMENTO PRA SOLTAR PURGA

[gcode_macro END_PRINT]
gcode:
  G92 E0; RESETA EXTRUSOR
  G1 E-4; RETIRA PRESSAO DO BICO
  M104 S0 ; DESLIGA AQUECIMENTO DO BICO
  M140 S0 ; DESLIGA AQUECIMENTO DA MESA
  G1 X0
  G1 Y200
  {% if printer.toolhead.position.z|float < 230 %}
  G1 Z230
  {% endif %}
  M84 ; DESLIGA MOTORES
  M300 S4 P500 ; GERA BEEP
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=current_layer VALUE=0
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=hotend_temp VALUE=0
  SET_GCODE_VARIABLE MACRO=PRINTER_TEMPS_VALUE VARIABLE=hotbed_temp VALUE=0

# Cancelar Impressão (comando customizado)
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
   #https://klipper.info/macro-examples-1/aboms-cancel_print
   M220 S100 ; Reset Speed factor override percentage to default (100%)
   M221 S100 ; Reset Extrude factor override percentage to default (100%)
   G91 ; Set coordinates to relative
   {% if printer.extruder.temperature >= 170 %}
      G1 F1800 E-3; Retract filament 3 mm to prevent oozing
   {% endif %}
   G90 ; Set coordinates to absolute
   {% if printer.toolhead.homed_axes == "xyz" %}
   G1 X0
   G1 Y200
   {% if printer.toolhead.position.z|float < 230 %}
   G1 Z230
   {% endif %}
   TURN_OFF_HEATERS
   {% endif %}
   M84 ; DESLIGA MOTORES
   M106 S0 ; DESLIGA VENTILADOR
   CANCEL_PRINT_BASE

[gcode_macro REMOVE_FILAMENT]
gcode:
    {% if printer.pause_resume.is_paused == true and printer.idle_timeout.state|string == "Printing" %}
    SAVE_GCODE_STATE NAME=unload_filament
    {% endif %}
    M83
    {% if printer.extruder.temperature < 200 %}
    M109 S200 ;Seta e espera temperatura caso a extrusora não esteja quente
    {% else %}
    M104 S200
    {% endif %}
    M117 Retirando Filamento
    G1 E50 F300
    M400
    M109 S200
    M104 S170
    M117 Retirando Filamento
    G1 E-50 F150 ;Retrai o Filamento Devagar
    G1 E-50 F150 ;Retrai o Filamento Devagar
    M400
    M109 S170
    M117 Retirando Filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    G1 E-50 F1200 ;Retira o resto do filamento
    M400
    M117 Carregar Filamento
    M300 S4 P500
    M400
    M104 S0
    M117 Carregar Filamento
    {% if printer.pause_resume.is_paused == true and printer.idle_timeout.state|string == "Printing" %}
    RESTORE_GCODE_STATE NAME=unload_filament
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0 ;Permite desligar o Stepper da extrusora. Necessário pois esse script precisa que o filamento seja carregado até a "presilha" que segura o tubo
    {% endif %}
	
[gcode_macro INSERT_FILAMENT]
gcode:
    {% if printer.pause_resume.is_paused == true and printer.idle_timeout.state|string == "Printing" %}
    SAVE_GCODE_STATE NAME=load_filament
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=1  ;Liga novamente o Stepper da extrusora.
    {% endif %}
    M83
    M117 EsperandoTemperatura
    {% if printer.extruder.temperature < 170 %}
    M109 S170 ;Seta e espera temeperatura caso a extrusora não esteja quente
    {% endif %}
    M104 S233
    M117 Carregando Filamento
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    G1 E50 F1200  ;Carrega o filamento novo
    M400
    {% if printer.pause_resume.is_paused == true and printer.idle_timeout.state|string == "Printing" %}
      M109 S{printer["gcode_macro PRINTER_TEMPS_VALUE"].hotend_temp}
    {% else %}
    M109 S240
    {% endif %}
    G1 E50 F150 ;Carrega o filamento novo devagar
    G1 E50 F150 ;Carrega o filamento novo devagar
    M400
    M117 Carregando Filamento
    G1 E50 F150 ;Faz uma purga para tirar sujeira de cor
    M400
    M300 S4 P500
    M117 Filamento Pronto
    {% if printer.pause_resume.is_paused == true and printer.idle_timeout.state|string == "Printing" %}
    RESTORE_GCODE_STATE NAME=load_filament
    {% endif %}

[gcode_macro CALIBRATE_ESTEPS]
gcode:
	;Documentação de como calibrar: https://teachingtechyt.github.io/calibration.html#esteps
    {% if not printer.idle_timeout.state|string == "Printing" %}
    M83
    {% if printer.extruder.temperature < 240 %}
    M109 S240 ;Seta e espera temperatura caso a extrusora não esteja quente
    {% endif %}
    G1 E100 F50
    M400
    M300 S4 P500
    {% endif %}

[gcode_macro QUERY_ACCELEROMETER]
gcode:
    {% if not printer.idle_timeout.state|string == "Printing" %}
    ACCELEROMETER_QUERY
    {% endif %}

[gcode_macro CALIBRATE_RESONANCE]
gcode:
    {% if not printer.idle_timeout.state|string == "Printing" %}
    {% if not printer.toolhead.homed_axes == "xyz" %}
    G28
    G29
    {% endif %}
    SHAPER_CALIBRATE
    M300 S4 P500
    {% endif %}

[gcode_macro CALIBRATE_PID]
gcode: 
    PID_CALIBRATE HEATER=extruder TARGET=240 WRITE_FILE=1
    PID_CALIBRATE HEATER=heater_bed TARGET=110 WRITE_FILE=1

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 23.846
#*# pid_ki = 1.458
#*# pid_kd = 97.469
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 60.687
#*# pid_ki = 2.339
#*# pid_kd = 393.709
#*#
#*# [probe]
#*# z_offset = 4.334
